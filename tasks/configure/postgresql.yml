---
- name: Create postgresql.conf file
  ansible.builtin.template:
    src: "postgresql.conf.j2"
    dest: "{{ pgsql_config_file }}"
    owner: postgres
    group: postgres
    mode: 0644
  tags:
    - install
    - configure
    - postgresql-conf

- name: Create postgresql.conf.d files
  ansible.builtin.template:
    src: "postgresql.conf.d/{{ item }}.j2"
    dest: "{{ pgsql_config_directory }}/conf.d/{{ item }}"
    owner: postgres
    group: postgres
    mode: 0644
  with_items:
    - "autovacuum.conf"
    - "client_connection_defaults.conf"
    - "connections_authentication.conf"
    - "customized_options.conf"
    - "error_handling.conf"
    - "files_locations.conf"
    - "lock_management.conf"
    - "process_title.conf"
    - "query_tuning.conf"
    - "replication.conf"
    - "reporting_logging.conf"
    - "resource_usage.conf"
    - "statistics.conf"
    - "version_platform_compatibility.conf"
    - "wal.conf"
  tags:
    - install
    - configure
    - postgresql-conf

- name: Create pg_hba.conf file
  ansible.builtin.template:
    src: "pg_hba.conf.j2"
    dest: "{{ hba_file }}"
    owner: postgres
    group: postgres
    mode: 0644
  register: pg_hba_stats
  tags:
    - install
    - configure
    - postgresql-hba

- name: Flush handlers to create PostgreSQL Objects
  ansible.builtin.meta: flush_handlers

- name: PostgreSQL test TCP postgres connection
  community.postgresql.postgresql_ping:
    db: postgres
    login_host: localhost
    login_user: postgres
    login_password: "{{ postgres_password | default(omit) }}"
  register: postgres_ping
  vars:
    ansible_python_interpreter: /usr/bin/python3
  tags:
    - install
    - configure

- name: Alter postgres password
  community.postgresql.postgresql_query:
    query: "ALTER ROLE postgres WITH PASSWORD '{{ postgres_password }}';"
    db: postgres
    login_host: localhost
    login_user: postgres
    login_unix_socket: "{{ unix_socket_directories }}"
    port: "{{ port }}"
  become: true
  become_user: postgres
  vars:
    ansible_ssh_pipelining: true
    ansible_python_interpreter: /usr/bin/python3
  when: not postgres_ping.is_available
  tags:
    - install
    - configure

- name: Reload pg_hba.conf
  community.postgresql.postgresql_query:
    query: "SELECT pg_reload_conf();"
    db: postgres
    login_host: localhost
    login_user: postgres
    login_unix_socket: "{{ unix_socket_directories }}"
    port: "{{ port }}"
  become: true
  become_user: postgres
  vars:
    ansible_ssh_pipelining: true
    ansible_python_interpreter: /usr/bin/python3
  when: pg_hba_stats.changed
  tags:
    - install
    - configure
    - postgresql-hba